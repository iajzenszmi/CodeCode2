ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ ls
IterativeFactorial.java  LargeFactorial.java
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ javac LargeFactorial.java
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ java LargeFactorial
Input factorial integer base: 
4
4! is
24 using standard factorial method.
4! is
24 using recursion method.
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ java LargeFactorial.java
Input factorial integer base: 
7
7! is
5040 using standard factorial method.
7! is
5040 using recursion method.
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ cat LargeFactorial.java
import java.math.BigInteger;
import java.util.InputMismatchException;
import java.util.Scanner;

public class LargeFactorial {
    public static long userInput;
    public static void main(String[]args){
        Scanner input = new Scanner(System.in);
        System.out.println("Input factorial integer base: ");
        try {
            userInput = input.nextLong();
            System.out.println(userInput + "! is\n" + factorial(userInput) + " using standard factorial method.");
            System.out.println(userInput + "! is\n" + factorialRec(userInput) + " using recursion method.");
        }catch(InputMismatchException x){
            System.out.println("Please give integral numbers.");
        }catch(StackOverflowError ex){
            if(userInput > 0) {
                System.out.println("Number too big.");
            }else{
                System.out.println("Please give non-negative(positive) numbers.");
            }
        }finally {
            System.exit(0);
        }
    }
    public static BigInteger factorialRec(long n){
        BigInteger result = BigInteger.ONE;
        return n == 0 ? result : result.multiply(BigInteger.valueOf(n)).multiply(factorial(n-1));
    }
    public static BigInteger factorial(long n){
        BigInteger result = BigInteger.ONE;
        for(int i = 1; i <= n; i++){
            result = result.multiply(BigInteger.valueOf(i));
        }
        return result;
    }
}
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ sloccount LargeFactorial.java
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/factorialjava/LargeFactorial.java to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
36      top_dir         java=36


Totals grouped by language (dominant language first):
java:            36 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 36
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.07)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.08 (0.93)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.08
Total Estimated Cost to Develop                           = $ 824
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ gedit largefactorialjavarunlisting.txt
ian@ian-HP-Stream-Laptop-11-y0XX:~/factorialjava$ 

