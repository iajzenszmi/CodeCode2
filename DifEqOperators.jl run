
:: ERROR: Incorrect usage: this script must be sourced.
  
usage: source setvars.sh [--force] [--config=file] [--help] [...]
  --force        Force setvars.sh to re-run, doing so may overload environment.
  --config=file  Customize env vars using a setvars.sh configuration file.
  --help         Display this help message and exit.
  ...            Additional args are passed to individual env/vars.sh scripts
                 and should follow this script's arguments.
  
  Some POSIX shells do not accept command-line options. In that case, you can pass
  command-line options via the SETVARS_ARGS environment variable. For example:
  
  $ SETVARS_ARGS="ia32 --config=config.txt" ; export SETVARS_ARGS
  $ . path/to/setvars.sh
  
  The SETVARS_ARGS environment variable is cleared on exiting setvars.sh.
  

:: initializing oneAPI environment ...
   bash: BASH_VERSION = 5.1.16(1)-release
   args: Using "$@" for setvars.sh arguments: 
:: advisor -- latest
:: ccl -- latest
:: compiler -- latest
:: dal -- latest
:: debugger -- latest
:: dev-utilities -- latest
:: dnnl -- latest
:: dpcpp-ct -- latest
:: dpl -- latest
:: intelpython -- latest
:: ipp -- latest
:: ippcp -- latest
:: ipp -- latest
:: mkl -- latest
:: mpi -- latest
:: tbb -- latest
:: vpl -- latest
:: vtune -- latest
:: oneAPI environment initialized ::
 
ian@ian-HP-Convertible-x360-11-ab1XX:~$ ian@ian-HP-Convertible-x360-11-ab1XX:~/CodeCode/DiffEqOperators.jl/src$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

(@v1.8) pkg> 
add DiffEqOperators
bash: ian@ian-HP-Convertible-x360-11-ab1XX:~/CodeCode/DiffEqOperators.jl/src$: No such file or directory
_: command not found
bash: syntax error near unexpected token `('
bash: syntax error near unexpected token `('
bash: syntax error near unexpected token `|'
bash: syntax error near unexpected token `|'
bash: syntax error near unexpected token `|'
bash: syntax error near unexpected token `|'
bash: syntax error near unexpected token `|'
bash: syntax error near unexpected token `pkg'
Command 'add' not found, did you mean:
  command 'hadd' from snap root-framework (v6-26-10)
  command 'ad' from deb netatalk (3.1.12~ds-9build1)
  command 'axd' from deb afnix (3.5.0-3)
  command 'dd' from deb coreutils (8.32-4.1ubuntu1)
  command 'and' from deb and (1.2.2-4.2)
  command 'adb' from deb adb (1:10.0.0+r36-9)
  command 'ddd' from deb ddd (1:3.3.12-5.3build1)
  command 'ldd' from deb libc-bin (2.35-0ubuntu3.1)
  command 'adr' from deb adr-tools (3.0.0-2)
  command 'pdd' from deb pdd (1.5-1)
  command 'tdd' from deb devtodo (0.1.20+git20200830.0ad52b0-1)
  command 'atd' from deb at (3.2.5-1ubuntu1)
  command 'aid' from deb id-utils (4.6.28-20200521ss15dab)
See 'snap info <snapname>' for additional versions.
ian@ian-HP-Convertible-x360-11-ab1XX:~$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.3 (2022-11-14)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

(@v1.8) pkg> add DiffEqOperators
    Updating registry at `~/.julia/registries/General.toml`
   Resolving package versions...
  No Changes to `~/.julia/environments/v1.8/Project.toml`
  No Changes to `~/.julia/environments/v1.8/Manifest.toml`

(@v1.8) pkg> test DiffEqOperators
     Testing DiffEqOperators
      Status `/tmp/jl_UmiQGe/Project.toml`
⌅ [aae01518] BandedMatrices v0.15.21
⌅ [ffab5731] BlockBandedMatrices v0.9.2
⌅ [2b5f629d] DiffEqBase v6.44.3
⌃ [9fdde737] DiffEqOperators v4.14.0
⌅ [1a297f60] FillArrays v0.9.7
  [f6369f11] ForwardDiff v0.10.33
⌅ [5078a376] LazyArrays v0.18.1
⌅ [d7e5e226] LazyBandedMatrices v0.3.6
⌅ [961ee093] ModelingToolkit v3.20.1
⌅ [872c559c] NNlib v0.7.11
⌃ [1dea7af3] OrdinaryDiffEq v5.42.3
  [d96e819e] Parameters v0.12.3
  [1bc83da4] SafeTestsets v0.0.1
  [7ccca996] SimpleDifferentialOperators v0.6.1
⌅ [276daf66] SpecialFunctions v0.10.3
⌅ [90137ffa] StaticArrays v0.12.5
  [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`
  [9a3f8284] Random `@stdlib/Random`
  [2f01184e] SparseArrays `@stdlib/SparseArrays`
  [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`
  [8dfed614] Test `@stdlib/Test`
      Status `/tmp/jl_UmiQGe/Manifest.toml`
⌅ [c3fe647b] AbstractAlgebra v0.11.2
  [1520ce14] AbstractTrees v0.4.3
⌅ [79e6a3ab] Adapt v2.4.0
⌅ [ec485272] ArnoldiMethod v0.1.0
⌅ [4fba245c] ArrayInterface v2.14.17
  [30b0a656] ArrayInterfaceCore v0.1.26
⌅ [4c555306] ArrayLayouts v0.4.7
⌅ [aae01518] BandedMatrices v0.15.21
⌅ [8e7c35d0] BlockArrays v0.12.12
⌅ [ffab5731] BlockBandedMatrices v0.9.2
  [a603d957] CanonicalTraits v0.2.4
⌅ [d360d2e6] ChainRulesCore v0.9.45
  [861a8166] Combinatorics v1.0.2
  [38540f10] CommonSolve v0.2.3
  [bbf7d656] CommonSubexpressions v0.3.0
⌅ [34da2185] Compat v2.2.1
  [88cd18e8] ConsoleProgressMonitor v0.1.2
  [187b0558] ConstructionBase v1.4.1
⌅ [864edb3b] DataStructures v0.17.20
⌅ [2b5f629d] DiffEqBase v6.44.3
⌅ [c894b116] DiffEqJump v6.10.0
⌃ [9fdde737] DiffEqOperators v4.14.0
  [163ba53b] DiffResults v1.1.0
⌃ [b552c78f] DiffRules v1.5.0
  [b4f34e82] Distances v0.10.7
⌅ [ffbed154] DocStringExtensions v0.8.6
⌃ [d4d017d3] ExponentialUtilities v1.19.0
  [e2ba6199] ExprTools v0.1.8
  [9aa1b823] FastClosures v0.3.2
⌅ [1a297f60] FillArrays v0.9.7
  [6a86dc24] FiniteDiff v2.17.0
  [59287772] Formatting v0.4.2
  [f6369f11] ForwardDiff v0.10.33
  [069b7b12] FunctionWrappers v1.1.3
  [46192b85] GPUArraysCore v0.1.2
⌅ [6b9d7cbe] GeneralizedGenerated v0.2.8
  [01680d73] GenericSVD v0.3.0
  [c145ed77] GenericSchur v0.5.3
  [615f187c] IfElse v0.1.1
  [d25df0c9] Inflate v0.1.3
  [92d709cd] IrrationalConstants v0.1.1
⌅ [42fd0dbc] IterativeSolvers v0.8.5
  [82899510] IteratorInterfaceExtensions v1.0.0
  [692b3bcd] JLLWrappers v1.4.1
  [b14d175d] JuliaVariables v0.2.4
  [b964fa9f] LaTeXStrings v1.3.0
⌃ [2ee39098] LabelledArrays v1.6.6
⌅ [23fbe1c1] Latexify v0.14.12
⌅ [5078a376] LazyArrays v0.18.1
⌅ [d7e5e226] LazyBandedMatrices v0.3.6
  [1d6d02ad] LeftChildRightSiblingTrees v0.2.0
  [093fc24a] LightGraphs v1.3.5
⌃ [d3d80556] LineSearches v7.1.1
⌃ [2ab3a3ac] LogExpFunctions v0.3.0
⌅ [e6f89c97] LoggingExtras v0.4.9
  [d8e11817] MLStyle v0.4.16
  [1914dd2f] MacroTools v0.5.10
⌅ [a3b82374] MatrixFactorizations v0.6.1
⌅ [961ee093] ModelingToolkit v3.20.1
  [46d2c3a1] MuladdMacro v0.2.4
  [d41bc354] NLSolversBase v7.8.3
  [2774e3e8] NLsolve v4.5.1
⌅ [872c559c] NNlib v0.7.11
⌅ [77ba4419] NaNMath v0.3.7
  [71a1bf82] NameResolution v0.1.5
  [bac558e1] OrderedCollections v1.4.1
⌃ [1dea7af3] OrdinaryDiffEq v5.42.3
  [d96e819e] Parameters v0.12.3
  [e409e4f3] PoissonRandom v0.4.3
  [21216c6a] Preferences v1.3.0
  [8162dcfd] PrettyPrint v0.2.0
  [33c8b6b6] ProgressLogging v0.1.4
  [92933f4c] ProgressMeter v1.7.2
  [fb686558] RandomExtensions v0.4.3
  [e6cf234a] RandomNumbers v1.5.3
  [3cdcf5f2] RecipesBase v1.3.2
⌃ [731186ca] RecursiveArrayTools v2.11.4
⌅ [f2c3362d] RecursiveFactorization v0.1.0
⌅ [189a3867] Reexport v0.2.0
  [ae029012] Requires v1.3.0
⌅ [f2b01f46] Roots v1.4.1
  [1bc83da4] SafeTestsets v0.0.1
⌅ [efcf1570] Setfield v0.8.2
  [7ccca996] SimpleDifferentialOperators v0.6.1
  [699a6c99] SimpleTraits v0.9.4
  [66db9d55] SnoopPrecompile v1.0.1
⌃ [47a9eef4] SparseDiffTools v1.13.2
⌅ [276daf66] SpecialFunctions v0.10.3
⌅ [90137ffa] StaticArrays v0.12.5
  [1e83bf80] StaticArraysCore v1.4.0
  [82ae8749] StatsAPI v1.5.0
⌅ [d1185830] SymbolicUtils v0.5.2
  [3783bdb8] TableTraits v1.0.1
  [5d786b92] TerminalLoggers v0.1.6
  [a759f4b9] TimerOutputs v0.5.22
  [a2a6695c] TreeViews v0.3.0
  [3a884ed6] UnPack v1.0.2
  [1986cc42] Unitful v1.12.2
⌅ [19fa3120] VertexSafeGraphs v0.1.2
  [700de1a5] ZygoteRules v0.2.2
  [efe28fd5] OpenSpecFun_jll v0.5.5+0
  [0dad84c5] ArgTools v1.1.1 `@stdlib/ArgTools`
  [56f22d72] Artifacts `@stdlib/Artifacts`
  [2a0f44e3] Base64 `@stdlib/Base64`
  [ade2ca70] Dates `@stdlib/Dates`
  [8bb1440f] DelimitedFiles `@stdlib/DelimitedFiles`
  [8ba89e20] Distributed `@stdlib/Distributed`
  [f43a241f] Downloads v1.6.0 `@stdlib/Downloads`
  [7b1f6079] FileWatching `@stdlib/FileWatching`
  [9fa8497b] Future `@stdlib/Future`
  [b77e0a4c] InteractiveUtils `@stdlib/InteractiveUtils`
  [b27032c2] LibCURL v0.6.3 `@stdlib/LibCURL`
  [76f85450] LibGit2 `@stdlib/LibGit2`
  [8f399da3] Libdl `@stdlib/Libdl`
  [37e2e46d] LinearAlgebra `@stdlib/LinearAlgebra`
  [56ddb016] Logging `@stdlib/Logging`
  [d6f4376e] Markdown `@stdlib/Markdown`
  [a63ad114] Mmap `@stdlib/Mmap`
  [ca575930] NetworkOptions v1.2.0 `@stdlib/NetworkOptions`
  [44cfe95a] Pkg v1.8.0 `@stdlib/Pkg`
  [de0858da] Printf `@stdlib/Printf`
  [3fa0cd96] REPL `@stdlib/REPL`
  [9a3f8284] Random `@stdlib/Random`
  [ea8e919c] SHA v0.7.0 `@stdlib/SHA`
  [9e88b42a] Serialization `@stdlib/Serialization`
  [1a1011a3] SharedArrays `@stdlib/SharedArrays`
  [6462fe0b] Sockets `@stdlib/Sockets`
  [2f01184e] SparseArrays `@stdlib/SparseArrays`
  [10745b16] Statistics `@stdlib/Statistics`
  [4607b0f0] SuiteSparse `@stdlib/SuiteSparse`
  [fa267f1f] TOML v1.0.0 `@stdlib/TOML`
  [a4e569a6] Tar v1.10.1 `@stdlib/Tar`
  [8dfed614] Test `@stdlib/Test`
  [cf7118a7] UUIDs `@stdlib/UUIDs`
  [4ec0a83e] Unicode `@stdlib/Unicode`
  [e66e0078] CompilerSupportLibraries_jll v0.5.2+0 `@stdlib/CompilerSupportLibraries_jll`
  [deac9b47] LibCURL_jll v7.84.0+0 `@stdlib/LibCURL_jll`
  [29816b5a] LibSSH2_jll v1.10.2+0 `@stdlib/LibSSH2_jll`
  [c8ffd9c3] MbedTLS_jll v2.28.0+0 `@stdlib/MbedTLS_jll`
  [14a3606d] MozillaCACerts_jll v2022.2.1 `@stdlib/MozillaCACerts_jll`
  [4536629a] OpenBLAS_jll v0.3.20+0 `@stdlib/OpenBLAS_jll`
  [83775a58] Zlib_jll v1.2.12+3 `@stdlib/Zlib_jll`
  [8e850b90] libblastrampoline_jll v5.1.1+0 `@stdlib/libblastrampoline_jll`
  [8e850ede] nghttp2_jll v1.48.0+0 `@stdlib/nghttp2_jll`
  [3f19e933] p7zip_jll v17.4.0+0 `@stdlib/p7zip_jll`
        Info Packages marked with ⌃ and ⌅ have new versions available, but those with ⌅ are restricted by compatibility constraints from upgrading.
     Testing Running tests...
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1093 [inlined]
└ @ Core ./broadcast.jl:1093
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1093 [inlined]
└ @ Core ./broadcast.jl:1093
Test Summary:   | Pass  Total   Time
Utilities Tests |    4      4  22.7s
 23.218017 seconds (22.58 M allocations: 1.573 GiB, 7.53% gc time, 43.92% compilation time: 43% of which was recompilation)
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = getindex at range.jl:974 [inlined]
└ @ Core ./range.jl:974
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1093 [inlined]
└ @ Core ./broadcast.jl:1093
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1093 [inlined]
└ @ Core ./broadcast.jl:1093
Test Summary:   | Pass  Total  Time
Poisson example |    1      1  8.7s
 12.364490 seconds (12.23 M allocations: 639.741 MiB, 3.87% gc time, 98.96% compilation time: 30% of which was recompilation)
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
Test Summary:         | Pass  Total   Time
Heat equation example |    1      1  20.9s
 20.944420 seconds (30.14 M allocations: 1.700 GiB, 9.57% gc time, 89.85% compilation time: 1% of which was recompilation)
Test Summary:                      | Pass  Total  Time
Robin Boundary Condition Operators |  124    124  4.6s
  4.613826 seconds (4.30 M allocations: 231.846 MiB, 3.30% gc time, 91.94% compilation time: 1% of which was recompilation)
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = broadcasted at broadcast.jl:1092 [inlined]
└ @ Core ./broadcast.jl:1092
┌ Warning: The keyword argument `tol` is deprecated, use `reltol` instead.
│   caller = ip:0x0
└ @ Core :-1
JacVec Operators Interface: Error During Test at /home/ian/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:79
  Test threw exception
  Expression: (solve(prob, TRBDF2())).retcode == :Success
  type GMRESIterable has no field reltol
  Stacktrace:
    [1] setproperty!(x::IterativeSolvers.GMRESIterable{DiffEqBase.ScaleVector{Vector{Float64}}, DiffEqBase.ScaleVector{Vector{Float64}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, IterativeSolvers.ArnoldiDecomp{Float64, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}}, IterativeSolvers.Residual{Float64, Float64}, Float64}, f::Symbol, v::Float64)
      @ Base ./Base.jl:39
    [2] (::DiffEqBase.DefaultLinSolve)(x::Vector{Float64}, A::OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, b::Vector{Float64}, update_matrix::Bool; tol::Float64, kwargs::Base.Pairs{Symbol, DiffEqBase.ScaleVector{Vector{Float64}}, Tuple{Symbol, Symbol}, NamedTuple{(:Pl, :Pr), Tuple{DiffEqBase.ScaleVector{Vector{Float64}}, DiffEqBase.ScaleVector{Vector{Float64}}}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/linear_nonlinear.jl:104
    [3] compute_step!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/newton.jl:155
    [4] nlsolve!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/nlsolve.jl:34
    [5] perform_step!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:406
    [6] perform_step!
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:387 [inlined]
    [7] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:428
    [8] #__solve#455
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:5 [inlined]
    [9] __solve
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:1 [inlined]
   [10] solve_call(_prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}; merge_callbacks::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [11] solve_call
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:64 [inlined]
   [12] #solve_up#467
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [13] solve_up
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:105 [inlined]
   [14] #solve#466
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [15] solve(prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:98
   [16] macro expansion
      @ /snap/julia/67/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:79
JacVec Operators Interface: Error During Test at /home/ian/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:80
  Test threw exception
  Expression: (solve(prob, TRBDF2(linsolve = LinSolveGMRES()))).retcode == :Success
  type GMRESIterable has no field reltol
  Stacktrace:
    [1] setproperty!(x::IterativeSolvers.GMRESIterable{DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity, DiffEqBase.ScaleVector{Vector{Float64}}}, DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity, DiffEqBase.ScaleVector{Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, IterativeSolvers.ArnoldiDecomp{Float64, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}}, IterativeSolvers.Residual{Float64, Float64}, Float64}, f::Symbol, v::Float64)
      @ Base ./Base.jl:39
    [2] (::DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})(x::Vector{Float64}, A::OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, b::Vector{Float64}, update_matrix::Bool; Pl::DiffEqBase.ScaleVector{Vector{Float64}}, Pr::DiffEqBase.ScaleVector{Vector{Float64}}, tol::Float64, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/linear_nonlinear.jl:163
    [3] compute_step!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/newton.jl:155
    [4] nlsolve!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/nlsolve.jl:34
    [5] perform_step!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:406
    [6] perform_step!
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:387 [inlined]
    [7] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:428
    [8] #__solve#455
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:5 [inlined]
    [9] __solve
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:1 [inlined]
   [10] solve_call(_prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}; merge_callbacks::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [11] solve_call
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:64 [inlined]
   [12] #solve_up#467
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [13] solve_up
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:105 [inlined]
   [14] #solve#466
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [15] solve(prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:98
   [16] macro expansion
      @ /snap/julia/67/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:80
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = getindex at range.jl:974 [inlined]
└ @ Core ./range.jl:974
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = getindex at range.jl:974 [inlined]
└ @ Core ./range.jl:974
┌ Warning: `range(start, stop)` (with neither `length` nor `step` given) is deprecated, use `range(start, stop=stop)` instead.
│   caller = getindex at range.jl:974 [inlined]
└ @ Core ./range.jl:974
JacVec Operators Interface: Error During Test at /home/ian/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:79
  Test threw exception
  Expression: (solve(prob, TRBDF2())).retcode == :Success
  type GMRESIterable has no field reltol
  Stacktrace:
    [1] setproperty!(x::IterativeSolvers.GMRESIterable{DiffEqBase.ScaleVector{Vector{Float64}}, DiffEqBase.ScaleVector{Vector{Float64}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, IterativeSolvers.ArnoldiDecomp{Float64, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}}, IterativeSolvers.Residual{Float64, Float64}, Float64}, f::Symbol, v::Float64)
      @ Base ./Base.jl:39
    [2] (::DiffEqBase.DefaultLinSolve)(x::Vector{Float64}, A::OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, b::Vector{Float64}, update_matrix::Bool; tol::Float64, kwargs::Base.Pairs{Symbol, DiffEqBase.ScaleVector{Vector{Float64}}, Tuple{Symbol, Symbol}, NamedTuple{(:Pl, :Pr), Tuple{DiffEqBase.ScaleVector{Vector{Float64}}, DiffEqBase.ScaleVector{Vector{Float64}}}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/linear_nonlinear.jl:104
    [3] compute_step!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/newton.jl:155
    [4] nlsolve!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/nlsolve.jl:34
    [5] perform_step!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:406
    [6] perform_step!
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:387 [inlined]
    [7] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.DefaultLinSolve}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:428
    [8] #__solve#455
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:5 [inlined]
    [9] __solve
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:1 [inlined]
   [10] solve_call(_prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}; merge_callbacks::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [11] solve_call
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:64 [inlined]
   [12] #solve_up#467
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [13] solve_up
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:105 [inlined]
   [14] #solve#466
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [15] solve(prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.DefaultLinSolve, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:98
   [16] macro expansion
      @ /snap/julia/67/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:79
JacVec Operators Interface: Error During Test at /home/ian/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:80
  Test threw exception
  Expression: (solve(prob, TRBDF2(linsolve = LinSolveGMRES()))).retcode == :Success
  type GMRESIterable has no field reltol
  Stacktrace:
    [1] setproperty!(x::IterativeSolvers.GMRESIterable{DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity, DiffEqBase.ScaleVector{Vector{Float64}}}, DiffEqBase.ComposePreconditioner{IterativeSolvers.Identity, DiffEqBase.ScaleVector{Vector{Float64}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, IterativeSolvers.ArnoldiDecomp{Float64, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}}, IterativeSolvers.Residual{Float64, Float64}, Float64}, f::Symbol, v::Float64)
      @ Base ./Base.jl:39
    [2] (::DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})(x::Vector{Float64}, A::OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, b::Vector{Float64}, update_matrix::Bool; Pl::DiffEqBase.ScaleVector{Vector{Float64}}, Pr::DiffEqBase.ScaleVector{Vector{Float64}}, tol::Float64, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/linear_nonlinear.jl:163
    [3] compute_step!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/newton.jl:155
    [4] nlsolve!(nlsolver::OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}, integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/nlsolve/nlsolve.jl:34
    [5] perform_step!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, repeat_step::Bool)
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:406
    [6] perform_step!
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/perform_step/sdirk_perform_step.jl:387 [inlined]
    [7] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, true, Vector{Float64}, Nothing, Float64, DiffEqBase.NullParameters, Float64, Float64, Float64, Vector{Vector{Float64}}, DiffEqBase.ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}, OrdinaryDiffEq.InterpolationData{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}}, DiffEqBase.DEStats}, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.TRBDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.TRBDF2Tableau{Float64, Float64}, OrdinaryDiffEq.NLSolver{DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Float64, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, OrdinaryDiffEq.WOperator{true, Any, LinearAlgebra.UniformScaling{Bool}, Float64, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Vector{Float64}, Nothing}, DiffEqBase.UJacobianWrapper{DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Float64, DiffEqBase.NullParameters}, Nothing, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), DiffEqBase.CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})
      @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:428
    [8] #__solve#455
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:5 [inlined]
    [9] __solve
      @ ~/.julia/packages/OrdinaryDiffEq/VPJBD/src/solve.jl:1 [inlined]
   [10] solve_call(_prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType}; merge_callbacks::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:92
   [11] solve_call
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:64 [inlined]
   [12] #solve_up#467
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:114 [inlined]
   [13] solve_up
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:105 [inlined]
   [14] #solve#466
      @ ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:102 [inlined]
   [15] solve(prob::DiffEqBase.ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, DiffEqBase.NullParameters, DiffEqBase.ODEFunction{true, typeof(Main.var"##316".lorenz), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, typeof(DiffEqBase.update_coefficients!), Nothing, Nothing, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, DiffEqOperators.JacVecOperator{Float64, typeof(Main.var"##316".lorenz), Vector{Float64}, Vector{Float64}, Vector{Float64}, Any, Any, Bool}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, DiffEqBase.StandardODEProblem}, args::OrdinaryDiffEq.TRBDF2{0, true, DiffEqBase.LinSolveIterativeSolvers{typeof(IterativeSolvers.gmres_iterable!), IterativeSolvers.Identity, IterativeSolvers.Identity, Tuple{}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, DataType})
      @ DiffEqBase ~/.julia/packages/DiffEqBase/V7P18/src/solve.jl:98
   [16] macro expansion
      @ /snap/julia/67/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined]
   [17] top-level scope
      @ ~/.julia/packages/DiffEqOperators/1gRmU/test/jacvec_operators.jl:80
Test Summary:              | Pass  Error  Broken  Total     Time
JacVec Operators Interface |   30      4       4     38  4m03.1s
ERROR: LoadError: Some tests did not pass: 30 passed, 0 failed, 4 errored, 4 broken.
in expression starting at /home/ian/.julia/packages/DiffEqOperators/1gRmU/test/runtests.jl:9
ERROR: Package DiffEqOperators errored during testing

(@v1.8) pkg> 

