an@ian-HP-Convertible-x360-11-ab1XX:~$ g++ hess.cpp
ian@ian-HP-Convertible-x360-11-ab1XX:~$ g++ hess.cpp -o hess
ian@ian-HP-Convertible-x360-11-ab1XX:~$ ./hess
Generating a random Hessenberg matrix of size 10 x 10...

The generated Hessenberg matrix is: 
2 5 6 9 4 1 3 0 2 5 
6 8 9 7 1 9 9 3 0 9 
0 6 7 8 1 3 9 3 0 7 
0 0 4 0 5 8 3 0 1 5 
0 0 0 6 6 6 6 6 2 8 
0 0 0 0 0 6 7 9 9 9 
0 0 0 0 0 0 3 0 0 4 
0 0 0 0 0 0 1 4 8 5 
0 0 0 0 0 0 0 8 0 8 
0 0 0 0 0 0 0 0 9 4 
ian@ian-HP-Convertible-x360-11-ab1XX:~$ cat hess.cpp
#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

int main() 
{
    srand(time(NULL));  //Generate a random seed for random numbers

    int r = rand() % 10 + 10; //Generate a random integer between 10 and 19

    cout << "Generating a random Hessenberg matrix of size " << r << " x " << r << "..." << endl;
    cout << endl;

    int matrix[r][r]; //Declare a 2D array to store the values of the Hessenberg matrix

    //Fill the matrix with random integers between 0 and 9
    for (int i = 0; i < r; i++) 
    {
        for (int j = 0; j < r; j++) 
        {
            matrix[i][j] = rand() % 10;
        }
    }

    //Assigning zeroes to all the positions in the matrix below the first sub-diagonal
    for (int i = 0; i < r; i++) 
    {
        for (int j = 0; j < r; j++) 
        {
            if (i > j + 1) 
            {
                matrix[i][j] = 0;
            }
        }
    }

    //Print the matrix
    cout << "The generated Hessenberg matrix is: " << endl;
    for (int i = 0; i < r; i++) 
    {
        for (int j = 0; j < r; j++) 
        {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
ian@ian-HP-Convertible-x360-11-ab1XX:~$ sloccount hess.cpp
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/hess.cpp to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
39      top_dir         cpp=39


Totals grouped by language (dominant language first):
cpp:             39 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 39
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.08)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.08 (0.96)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.08
Total Estimated Cost to Develop                           = $ 896
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Convertible-x360-11-ab1XX:~$ ^C
ian@ian-HP-Convertible-x360-11-ab1XX:~$ 

