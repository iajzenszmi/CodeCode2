ian@ian-HP-Convertible-x360-11-ab1XX:~$ javac Test.java
ian@ian-HP-Convertible-x360-11-ab1XX:~$ java Test
overflow produces infinity: 1.0E308*10==Infinity
gradual underflow: 3.141592653589793E-305
  3.1415926535898E-310 3.141592653E-315 3.142E-320 0.0
0.0/0.0 is Not-a-Number: NaN
inexact results with float: 0 41 47 55 61 82 83 94 97
inexact results with double: 0 49 98
cast to int rounds toward 0: 12345 -12345
ian@ian-HP-Convertible-x360-11-ab1XX:~$ cat Test.java
//4.2 Primitive Types and Values TYPES, VALUES, AND VARIABLES
//If at least one of the operands to a numerical operator is of type double, then the
//operation is carried out using 64-bit floating-point arithmetic, and the result of the
//numerical operator is a value of type double. If the other operand is not a double,
//it is first widened (§5.1.5) to type double by numeric promotion (§5.6).
//Otherwise, at least one of the operands is of type float; the operation is carried
//out using 32-bit floating-point arithmetic, and the result of the numerical operator
//is a value of type float. If the other operand is not a float, it is first widened to
//type float by numeric promotion.
//Floating-point arithmetic is carried out in accordance with the rules of the IEEE
//754 Standard, including for overflow and underflow (§15.4), with the exception of
//the remainder operator % (§15.17.3).
//Any value of a floating-point type may be cast to or from any numeric type. There
//are no casts between floating-point types and the type boolean.
//See §4.2.5 for an idiom to convert floating-point expressions to boolean.
//A floating-point operator can throw an exception (§11 (Exceptions)) for the
//following reasons:
//• Any floating-point operator can throw a NullPointerException if unboxing
//conversion (§5.1.8) of a null reference is required.
//• The increment and decrement operators ++ (§15.14.2, §15.15.1) and --
//(§15.14.3, §15.15.2) can throw an OutOfMemoryError if boxing conversion
//(§5.1.7) is required and there is not sufficient memory available to perform the
//conversion.
//Example 4.2.4-1. Floating-point Operations
class Test {
public static void main(String[] args) {
// An example of overflow:
double d = 1e308;
System.out.print("overflow produces infinity: ");
System.out.println(d + "*10==" + d*10);
// An example of gradual underflow:
d = 1e-305 * Math.PI;
System.out.print("gradual underflow: " + d + "\n ");
for (int i = 0; i < 4; i++)
System.out.print(" " + (d /= 100000));
System.out.println();
// An example of NaN:
System.out.print("0.0/0.0 is Not-a-Number: ");
d = 0.0/0.0;
System.out.println(d);
// An example of inexact results and rounding:
//60
//TYPES, VALUES, AND VARIABLES Primitive Types and Values 4.2
System.out.print("inexact results with float:");
for (int i = 0; i < 100; i++) {
float z = 1.0f / i;
if (z * i != 1.0f)
System.out.print(" " + i);
}
System.out.println();
// Another example of inexact results and rounding:
System.out.print("inexact results with double:");
for (int i = 0; i < 100; i++) {
double z = 1.0 / i;
if (z * i != 1.0)
System.out.print(" " + i);
}
System.out.println();
// An example of cast to integer rounding:
System.out.print("cast to int rounds toward 0: ");
d = 12345.6;
System.out.println((int)d + " " + (int)(-d));
}
}

ian@ian-HP-Convertible-x360-11-ab1XX:~$ sloccount Test.java
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/Test.java to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
32      top_dir         java=32


Totals grouped by language (dominant language first):
java:            32 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 32
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.06)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.07 (0.88)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.07
Total Estimated Cost to Develop                           = $ 728
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Convertible-x360-11-ab1XX:~$ 
